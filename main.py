import os
import logging
import threading
from flask import Flask
from app import app
from extensions import db

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
log_path = os.path.join(BASE_DIR, "app.log")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[
        logging.FileHandler(log_path),
        logging.StreamHandler()
    ]
)

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask –∞–¥–º–∏–Ω–∫–∏"""
    logging.info("üåê –ó–∞–ø—É—Å–∫ Flask –∞–¥–º–∏–Ω–∫–∏ –Ω–∞ –ø–æ—Ä—Ç—É 5000...")
    app.run(host="0.0.0.0", port=5000, debug=False, use_reloader=False)

def run_bot_polling():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ polling –∏–ª–∏ webhook"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from models import SystemConfig
        
        with app.app_context():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            deployment_detected = False
            webhook_domain = None
            
            # 1. Replit Deployment
            if os.environ.get('REPL_DEPLOYMENT') or os.environ.get('REPL_URL'):
                deployment_detected = True
                webhook_domain = os.environ.get('REPL_URL', f"https://{os.environ.get('REPL_SLUG', 'workspace')}-{os.environ.get('REPL_OWNER', 'user')}.replit.app")
                logging.info(f"üöÄ Replit Deployment detected: {webhook_domain}")
            
            # 2. –í–Ω–µ—à–Ω–∏–π VPS/—Å–µ—Ä–≤–µ—Ä
            elif os.environ.get('WEBHOOK_URL'):
                deployment_detected = True
                webhook_domain = os.environ.get('WEBHOOK_URL')
                logging.info(f"üåê External server detected: {webhook_domain}")
            
            # 3. –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ webhook –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            elif SystemConfig.get_config('BOT_MODE') == 'webhook':
                deployment_detected = True
                webhook_domain = SystemConfig.get_config('WEBHOOK_DOMAIN')
                logging.info(f"‚öôÔ∏è Webhook mode configured manually: {webhook_domain}")
            
            if deployment_detected:
                bot_mode = 'webhook'
                SystemConfig.set_config('BOT_MODE', 'webhook', 'text', '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞')
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–º–µ–Ω –¥–ª—è webhook
                current_domain = SystemConfig.get_config('WEBHOOK_DOMAIN')
                
                if webhook_domain and (not current_domain or current_domain != webhook_domain):
                    SystemConfig.set_config('WEBHOOK_DOMAIN', webhook_domain, 'text', '–î–æ–º–µ–Ω –¥–ª—è webhook')
                    logging.info(f"üîÑ Webhook domain updated: {webhook_domain}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ deployment
                from datetime import datetime
                SystemConfig.set_config('DEPLOYMENT_START_TIME', datetime.now().isoformat(), 'text', '–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ deployment')
                SystemConfig.set_config('DEPLOYMENT_URL', webhook_domain, 'text', 'URL deployment')
                
                logging.info(f"‚úÖ Auto-switched to webhook mode with domain: {webhook_domain}")
            else:
                bot_mode = SystemConfig.get_config('BOT_MODE', 'polling')
                logging.info("üîÑ Using polling mode (development)")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            db_token = SystemConfig.get_config('BOT_TOKEN')
            if db_token:
                os.environ['BOT_TOKEN'] = db_token
                logging.info("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
        if bot_mode == 'webhook':
            logging.info("üåê –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook...")
            
            # –í deployment —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if os.environ.get('REPL_DEPLOYMENT'):
                from webhook_bot import setup_webhook
                webhook_setup = setup_webhook()
                if not webhook_setup:
                    logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook –≤ deployment")
            
            from webhook_bot import start_webhook_server
            webhook_started = start_webhook_server()
            if webhook_started:
                logging.info("‚úÖ Webhook —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω, Flask —Å–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã")
                # –í webhook —Ä–µ–∂–∏–º–µ Flask —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
                import time
                while True:
                    time.sleep(60)  # –ü—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∏–º –ø–æ—Ç–æ–∫ alive
            else:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å webhook, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ polling")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–∞ polling
                try:
                    from bot import bot
                    bot.remove_webhook()
                    logging.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–∞ polling")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
                
                from bot import start_bot_polling_only
                start_bot_polling_only()
        else:
            logging.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ polling...")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤ polling —Ä–µ–∂–∏–º–µ
            try:
                from bot import bot
                bot.remove_webhook()
                logging.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ polling —Ä–µ–∂–∏–º–µ")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
            
            from bot import start_bot_polling_only
            start_bot_polling_only()
    except KeyboardInterrupt:
        logging.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram –±–æ—Ç–∞")

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with app.app_context():
        try:
            db.create_all()
            logging.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {app.config['SQLALCHEMY_DATABASE_URI']}")
        except Exception as e:
            logging.exception("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            exit(1)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        from models import SystemConfig
        with app.app_context():
            bot_mode = SystemConfig.get_config('BOT_MODE', 'polling')

        if bot_mode == 'webhook':
            # –í webhook —Ä–µ–∂–∏–º–µ Flask –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            logging.info("üåê –ó–∞–ø—É—Å–∫ –≤ webhook —Ä–µ–∂–∏–º–µ...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º webhook –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def init_webhook():
                import time
                time.sleep(2)  # –î–∞–µ–º Flask –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
                from webhook_bot import start_webhook_server
                start_webhook_server()
            
            webhook_thread = threading.Thread(target=init_webhook, daemon=True)
            webhook_thread.start()
            
            # Flask –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            logging.info("üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è webhook...")
            app.run(host="0.0.0.0", port=5000, debug=False, use_reloader=False)
        else:
            # –í polling —Ä–µ–∂–∏–º–µ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –±–æ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º
            logging.info("ü§ñ –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ...")
            
            flask_thread = threading.Thread(target=run_flask, daemon=True)
            flask_thread.start()
            logging.info("‚úÖ Flask –∞–¥–º–∏–Ω–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")

            # –î–∞–µ–º Flask –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            import time
            time.sleep(2)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            run_bot_polling()

    except KeyboardInterrupt:
        logging.info("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.exception("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")