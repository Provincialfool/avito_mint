
import os
import logging
from flask import Flask, request, abort
import telebot
from telebot.types import Update

from app import app, db
from bot import bot, BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
handlers = [logging.StreamHandler()]

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –≤ Replit
log_path = os.path.join(os.path.dirname(__file__), "webhook_bot.log")

try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
    test_handler = logging.FileHandler(log_path)
    test_handler.close()
    handlers.append(logging.FileHandler(log_path))
except (PermissionError, OSError):
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ - –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å (systemd journal)
    pass

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=handlers
)

# URL –¥–ª—è webhook - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–º–µ–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_webhook_url():
    """–ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è webhook –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        from models import SystemConfig
        from app import app
        
        with app.app_context():
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            webhook_domain = SystemConfig.get_config('WEBHOOK_DOMAIN')
            if webhook_domain:
                logging.info(f"Using webhook domain from DB: {webhook_domain}")
                return webhook_domain.rstrip('/')
            
            # –î–ª—è Deployment –∏—Å–ø–æ–ª—å–∑—É–µ–º REPL_URL (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            repl_url = os.environ.get('REPL_URL', '')
            if repl_url:
                logging.info(f"Using REPL_URL for webhook: {repl_url}")
                return repl_url.rstrip('/')
            
            # –î–ª—è VPS –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é WEBHOOK_URL
            webhook_url = os.environ.get('WEBHOOK_URL', '')
            if webhook_url:
                logging.info(f"Using WEBHOOK_URL for external VPS: {webhook_url}")
                return webhook_url.rstrip('/')
            
            # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Replit URL (–¥–ª—è development)
            repl_slug = os.environ.get('REPL_SLUG', 'workspace')
            repl_owner = os.environ.get('REPL_OWNER', 'user')
            fallback_url = f"https://{repl_slug}-{repl_owner}.replit.app"
            logging.info(f"Using fallback URL: {fallback_url}")
            return fallback_url
    except Exception as e:
        logging.error(f"Error getting webhook URL: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º deployment URL –∏–ª–∏ fallback
        fallback = os.environ.get('REPL_URL') or os.environ.get('WEBHOOK_URL') or f"https://{os.environ.get('REPL_SLUG', 'workspace')}-{os.environ.get('REPL_OWNER', 'user')}.replit.app"
        logging.error(f"Using emergency fallback: {fallback}")
        return fallback

WEBHOOK_URL_PATH = f"/{BOT_TOKEN}/"

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram –±–æ—Ç–∞"""
    try:
        webhook_url = get_webhook_url() + WEBHOOK_URL_PATH
        logging.info(f"üîó Setting webhook URL: {webhook_url}")
        
        from bot import bot
        bot.remove_webhook()
        import time
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        success = bot.set_webhook(
            url=webhook_url,
            max_connections=10,
            allowed_updates=["message", "callback_query"]
        )
        
        if success:
            logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return True
        else:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
            return False
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return False



@app.route('/webhook', methods=['POST'])
def webhook_telegram():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è Telegram webhook"""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK'
    else:
        abort(403)

@app.route('/webhook-status', methods=['GET'])
def webhook_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ webhook"""
    try:
        from models import SystemConfig
        
        with app.app_context():
            bot_mode = SystemConfig.get_config('BOT_MODE', 'polling')
            webhook_domain = SystemConfig.get_config('WEBHOOK_DOMAIN', '')
            
        webhook_url = get_webhook_url() + WEBHOOK_URL_PATH
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook —á–µ—Ä–µ–∑ API
        webhook_info = bot.get_webhook_info()
        
        status = {
            'bot_mode': bot_mode,
            'webhook_domain': webhook_domain,
            'webhook_url': webhook_url,
            'telegram_webhook_url': webhook_info.url,
            'pending_updates': webhook_info.pending_update_count,
            'last_error': webhook_info.last_error_message,
            'is_webhook_set': bool(webhook_info.url),
            'webhook_matches': webhook_info.url == webhook_url
        }
        
        return status, 200
        
    except Exception as e:
        return {'error': str(e)}, 500

@app.route(WEBHOOK_URL_PATH, methods=['POST'])
def webhook_handler():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        abort(403)

def set_webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from models import SystemConfig
        from app import app
        
        with app.app_context():
            bot_mode = SystemConfig.get_config('BOT_MODE', 'polling')
            webhook_domain = SystemConfig.get_config('WEBHOOK_DOMAIN')
            
            if bot_mode != 'webhook':
                logging.info("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–µ webhook, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É")
                return False
                
            if not webhook_domain:
                logging.error("WEBHOOK_DOMAIN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                logging.info("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è webhook")
                return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL
        webhook_base = get_webhook_url()
        webhook_url = webhook_base + WEBHOOK_URL_PATH
        
        logging.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –Ω–∞: {webhook_url}")
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook
        bot.remove_webhook()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        success = bot.set_webhook(url=webhook_url)
        
        if success:
            logging.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook
            webhook_info = bot.get_webhook_info()
            logging.info(f"Webhook info: URL={webhook_info.url}, pending_updates={webhook_info.pending_update_count}")
            return True
        else:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
            return False
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
        return False

def start_webhook_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook"""
    try:
        logging.info("üåê –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from models import SystemConfig
        with app.app_context():
            bot_mode = SystemConfig.get_config('BOT_MODE', 'polling')
            webhook_domain = SystemConfig.get_config('WEBHOOK_DOMAIN', '')
            
        if bot_mode == 'webhook' and webhook_domain:
            # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook
            if set_webhook():
                logging.info("üöÄ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                return True
            else:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
                return False
        else:
            logging.info("Webhook —Ä–µ–∂–∏–º –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º polling")
            return False
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

if __name__ == "__main__":
    with app.app_context():
        start_webhook_server()
