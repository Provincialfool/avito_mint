import io
import logging
import os
from typing import Tuple, Optional
import replicate
import requests
from PIL import Image
from telebot.types import InputSticker
import telebot
import re
from app import app, db
from models import User, StickerGeneration

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
log_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "logs")
os.makedirs(log_dir, exist_ok=True)
log_file = os.path.join(log_dir, "sticker_generator.log")

logging.basicConfig(
    level=logging.INFO,
    format="%(levelname)s | %(asctime)s | %(name)s | %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(log_file, encoding='utf-8')
    ]
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–û–ù–°–¢–ê–ù–¢–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
IMG_DIR = os.path.join(BASE_DIR, "img")
BACKGROUND_PATH = os.path.join(IMG_DIR, "background.png")
SHILDIK_PATH = os.path.join(IMG_DIR, "shildik.png")
UPLOAD_DIR = os.path.join(BASE_DIR, "static", "uploads")
AVITO_STICKERS_DIR = os.path.join(BASE_DIR, "static", "stickers")

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(UPLOAD_DIR, exist_ok=True)
os.makedirs(AVITO_STICKERS_DIR, exist_ok=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_replicate_token():
    try:
        from models import SystemConfig
        with app.app_context():
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db_token = SystemConfig.get_config('REPLICATE_API_TOKEN')
            if db_token:
                return db_token
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç, –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    return os.getenv("REPLICATE_API_TOKEN")

REPLICATE_API_TOKEN = get_replicate_token()
replicate_client = None

if REPLICATE_API_TOKEN:
    replicate_client = replicate.Client(api_token=REPLICATE_API_TOKEN)
    logging.info("‚úÖ REPLICATE_API_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞")
else:
    logging.warning("REPLICATE_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω - —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–¢–ò–õ–ò–¢–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _grab_url(raw) -> Optional[str]:
    if not raw:
        return None
    if isinstance(raw, str) and raw.startswith("http"):
        return raw
    if isinstance(raw, (list, tuple)):
        for item in raw:
            url = _grab_url(item)
            if url:
                return url
    if isinstance(raw, dict):
        for key in ("image", "images", "url", "output"):
            if key in raw:
                url = _grab_url(raw[key])
                if url:
                    return url
    return None

def assemble_sticker(person_img: Image.Image) -> Optional[io.BytesIO]:
    try:
        if not os.path.exists(BACKGROUND_PATH) or not os.path.exists(SHILDIK_PATH):
            logging.warning("–ù–µ—Ç background.png –∏–ª–∏ shildik.png ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É")
            return None

        background = Image.open(BACKGROUND_PATH).convert("RGBA").resize((512, 512), Image.Resampling.LANCZOS)
        shildik = Image.open(SHILDIK_PATH).convert("RGBA").resize((512, 512), Image.Resampling.LANCZOS)
        if person_img.size != (320, 320):
            person_img = person_img.resize((320, 320), Image.Resampling.LANCZOS)

        x = (512 - person_img.width) // 2
        y = (512 - person_img.height) // 2 - 30

        result = background.copy()
        result.paste(person_img, (x, y), person_img)
        result.paste(shildik, (0, 0), shildik)

        buf = io.BytesIO()
        result.save(buf, format="PNG")
        buf.seek(0)
        return buf
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞: {err}")
        return None

def create_sticker_pack(bot: telebot.TeleBot, chat_id: int, user_sticker_path: str) -> Optional[str]:
    try:
        logging.info(f"[{chat_id}] Creating sticker pack")

        with app.app_context():
            user = User.query.filter_by(telegram_id=str(chat_id)).first()
            if not user:
                logging.error(f"[{chat_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å /start.")
                return None

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
        bot_username = bot.get_me().username

        # –ö–æ—Ä–æ—Ç–∫–æ–µ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ–µ –∏–º—è: AvitoTeam_ID
        pack_short_name = f"avitoteam_{chat_id}_by_{bot_username}"
        pack_short_name = re.sub(r'[^a-z0-9_]', '', pack_short_name.lower())[:64]

        # –õ–∞–∫–æ–Ω–∏—á–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        pack_title = f"AvitoTeam_{chat_id}"

        pack_url = f"https://t.me/addstickers/{pack_short_name}"

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞
        stickers = [InputSticker(open(user_sticker_path, "rb"), emoji_list=["üòä"])]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ –ø–∞–ø–∫–∏ static/stickers
        stickers_dir = os.path.join(BASE_DIR, "static", "stickers")
        for i in range(1, 9):  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å—Ç–∏–∫–µ—Ä—ã —Å –∏–º–µ–Ω–∞–º–∏ 1.png, 2.png, ..., 8.png
            sticker_path = os.path.join(stickers_dir, f"{i}.png")
            if os.path.exists(sticker_path):
                stickers.append(InputSticker(open(sticker_path, "rb"), emoji_list=["üòä"]))

        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫
        bot.create_new_sticker_set(
            user_id=chat_id,
            name=pack_short_name,
            title=pack_title,
            stickers=stickers,
            sticker_format="static"
        )
        logging.info(f"[{chat_id}] Created sticker pack {pack_short_name}")

        pack_url = f"https://t.me/addstickers/{pack_short_name}"
        logging.info(f"[{chat_id}] Sticker pack created: {pack_url}")

        with app.app_context():
            user = User.query.filter_by(telegram_id=str(chat_id)).first()
            if user:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                existing_gen = StickerGeneration.query.filter_by(user_id=user.id).first()
                if existing_gen:
                    existing_gen.template_used = "avito_team"
                    existing_gen.generated_file_id = f"sticker_{chat_id}.png"
                    existing_gen.sticker_set_name = pack_short_name
                    existing_gen.sticker_set_link = pack_url
                    existing_gen.pack_url = pack_url
                    existing_gen.status = "ok"
                    logging.info(f"[{chat_id}] Updated existing sticker generation record")
                else:
                    sticker_gen = StickerGeneration(
                        user_id=user.id,
                        template_used="avito_team",
                        generated_file_id=f"sticker_{chat_id}.png",
                        sticker_set_name=pack_short_name,
                        sticker_set_link=pack_url,
                        pack_url=pack_url,
                        status="ok"
                    )
                    db.session.add(sticker_gen)
                    logging.info(f"[{chat_id}] Created new sticker generation record")
                db.session.commit()
                logging.info(f"[{chat_id}] Sticker generation record saved successfully")

        return pack_url

    except Exception as err:
        error_str = str(err).lower()
        logging.error(f"[{chat_id}] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞: {err}")

        # –ï—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if "already occupied" in error_str or "name is already" in error_str:
            logging.info(f"[{chat_id}] Sticker pack name occupied, verifying existence...")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API
            try:
                existing_set = bot.get_sticker_set(pack_short_name)
                if existing_set and hasattr(existing_set, 'stickers') and len(existing_set.stickers) > 0:
                    logging.info(f"[{chat_id}] Sticker pack confirmed exists, updating DB")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    with app.app_context():
                        user = User.query.filter_by(telegram_id=str(chat_id)).first()
                        if user:
                            existing_gen = StickerGeneration.query.filter_by(user_id=user.id).first()
                            if existing_gen:
                                existing_gen.sticker_set_name = pack_short_name
                                existing_gen.sticker_set_link = pack_url
                                existing_gen.pack_url = pack_url
                                existing_gen.status = "ok"
                                existing_gen.template_used = "avito_team"
                            else:
                                sticker_gen = StickerGeneration(
                                    user_id=user.id,
                                    template_used="avito_team",
                                    generated_file_id=f"sticker_{chat_id}.png",
                                    sticker_set_name=pack_short_name,
                                    sticker_set_link=pack_url,
                                    pack_url=pack_url,
                                    status="ok"
                                )
                                db.session.add(sticker_gen)
                            db.session.commit()
                    
                    return pack_url
                else:
                    logging.info(f"[{chat_id}] Sticker pack name occupied but pack is empty/deleted, continuing creation")
            except Exception as verify_error:
                if "not found" in str(verify_error).lower():
                    logging.info(f"[{chat_id}] Sticker pack name occupied but pack not found, continuing creation")
                else:
                    logging.warning(f"[{chat_id}] Could not verify sticker pack existence: {verify_error}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ URL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ API –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        # (—É–±–∏—Ä–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è)

        try:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞.")
        except Exception as send_error:
            logging.error(f"[{chat_id}] Failed to send error message: {send_error}")
        return None

def reinitialize_replicate_client():
    """–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Replicate —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    global replicate_client, REPLICATE_API_TOKEN
    
    REPLICATE_API_TOKEN = get_replicate_token()
    
    if REPLICATE_API_TOKEN:
        replicate_client = replicate.Client(api_token=REPLICATE_API_TOKEN)
        logging.info("‚úÖ Replicate –∫–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º")
        return True
    else:
        replicate_client = None
        logging.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Replicate –∫–ª–∏–µ–Ω—Ç - —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def generate_sticker_from_user_photo(file_url: str, chat_id: int, bot) -> Tuple[Optional[io.BytesIO], Optional[str], Optional[str], Optional[str]]:
    """Generate sticker from user photo - limit one successful generation per user"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –ø–æ –∏–º–µ–Ω–∏ –≤ Telegram API
    bot_username = bot.get_me().username
    pack_short_name = f"avitoteam_{chat_id}_by_{bot_username}"
    pack_short_name = re.sub(r'[^a-z0-9_]', '', pack_short_name.lower())[:64]
    pack_url = f"https://t.me/addstickers/{pack_short_name}"

    def update_db_and_return_existing():
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫"""
        with app.app_context():
            user = User.query.filter_by(telegram_id=str(chat_id)).first()
            if user:
                existing_gen = StickerGeneration.query.filter_by(user_id=user.id).first()
                if existing_gen:
                    existing_gen.sticker_set_name = pack_short_name
                    existing_gen.sticker_set_link = pack_url
                    existing_gen.pack_url = pack_url
                    existing_gen.status = "ok"
                    existing_gen.template_used = "avito_team"
                else:
                    sticker_gen = StickerGeneration(
                        user_id=user.id,
                        template_used="avito_team",
                        generated_file_id=f"sticker_{chat_id}.png",
                        sticker_set_name=pack_short_name,
                        sticker_set_link=pack_url,
                        pack_url=pack_url,
                        status="ok"
                    )
                    db.session.add(sticker_gen)
                db.session.commit()
        return None, None, pack_url, f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫!\n\n–°—Å—ã–ª–∫–∞: {pack_url}\n\n–î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Telegram –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å!"

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        with app.app_context():
            user = User.query.filter_by(telegram_id=str(chat_id)).first()
            if user:
                existing_gen = StickerGeneration.query.filter_by(
                    user_id=user.id, 
                    status='ok'
                ).filter(
                    StickerGeneration.pack_url.isnot(None)
                ).first()

                if existing_gen and existing_gen.pack_url:
                    logging.info(f"[{chat_id}] Found existing sticker pack in DB: {existing_gen.pack_url}")
                    return None, None, existing_gen.pack_url, f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫!\n\n–°—Å—ã–ª–∫–∞: {existing_gen.pack_url}\n\n–î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Telegram –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å!"
    except Exception as db_error:
        logging.warning(f"[{chat_id}] DB check error: {db_error}")

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Telegram API
    try:
        sticker_set = bot.get_sticker_set(pack_short_name)
        if sticker_set and hasattr(sticker_set, 'stickers') and len(sticker_set.stickers) > 0:
            logging.info(f"[{chat_id}] Found existing sticker pack in Telegram: {pack_url}")
            return update_db_and_return_existing()
    except Exception as e:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "not found" - —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Ç–æ—á–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if "not found" in str(e).lower() or "sticker set not found" in str(e).lower():
            logging.info(f"[{chat_id}] Sticker pack confirmed not found: {e}")
        else:
            logging.info(f"[{chat_id}] Sticker pack check in Telegram failed: {e}")

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ URL (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    try:
        import requests
        response = requests.get(pack_url, timeout=10)
        if response.status_code == 200:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫, –∞ –Ω–µ –æ—à–∏–±–∫—É
            text_lower = response.text.lower()
            if ("addstickers" in text_lower or "stickerset" in text_lower) and "not found" not in text_lower and "404" not in text_lower:
                logging.info(f"[{chat_id}] Sticker pack exists via URL check: {pack_url}")
                return update_db_and_return_existing()
            else:
                logging.info(f"[{chat_id}] URL check shows sticker pack does not exist")
        else:
            logging.info(f"[{chat_id}] URL check failed with status: {response.status_code}")
    except Exception as e:
        logging.info(f"[{chat_id}] URL check failed: {e}")

    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞ - —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    logging.info(f"[{chat_id}] No existing sticker pack found, proceeding with generation")

    try:
        if not replicate_client:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É
            logging.info(f"[{chat_id}] Replicate –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...")
            if not reinitialize_replicate_client():
                logging.error(f"[{chat_id}] REPLICATE_API_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                bot.send_message(chat_id, "‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return None, None, None, None

        logging.info(f"[{chat_id}] Starting sticker generation, photo_url={file_url}")
        if not file_url.startswith("https://"):
            logging.error(f"[{chat_id}] Invalid photo URL: {file_url}")
            return None, None, None, None

        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User.query.filter_by(telegram_id=str(chat_id)).first()
            if not user:
                logging.error(f"User not found for chat_id: {chat_id}")
                return None, None, None, None

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            existing_generation = StickerGeneration.query.filter_by(
                user_id=user.id
            ).filter(
                StickerGeneration.status.in_(['ok', 'completed'])
            ).first()
            if existing_generation and existing_generation.pack_url:
                logging.info(f"User {user.id} already has a completed sticker generation")
                return None, None, existing_generation.pack_url, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫"

        flux_raw = replicate_client.run(
            "black-forest-labs/flux-kontext-pro",
            input={
                "seed": 1224737784,
                "prompt": (
                    "Make a cute cartoon avatar in simple flat vector style with bold outlines, "
                    "clean shapes, and no shading. Remove all text, logos, or watermarks. "
                    "Solid or transparent background."
                ),
                "input_image": file_url,
                "aspect_ratio": "1:1",
                "output_format": "png",
                "safety_tolerance": 2,
            },
        )
        cartoon_url = _grab_url(flux_raw)
        if not cartoon_url:
            logging.error(f"[{chat_id}] Flux did not return a valid URL")
            return None, None, None, None

        bg_raw = replicate_client.run(
            "851-labs/background-remover:a029dff38972b5fda4ec5d75d7d1cd25aeff621d2cf4946a41055d7db66b80bc",
            input={"image": cartoon_url, "format": "png", "background_type": "rgba"},
        )
        clean_url = _grab_url(bg_raw)
        if not clean_url:
            logging.error(f"[{chat_id}] Background Remover did not return a valid URL")
            return None, None, None, None

        resp = requests.get(clean_url, timeout=20)
        resp.raise_for_status()
        person_img = Image.open(io.BytesIO(resp.content)).convert("RGBA")
        if person_img.size[0] < 100 or person_img.size[1] < 100:
            logging.error(f"[{chat_id}] Image too small: {person_img.size}")
            return None, None, None, None
        person_img = person_img.resize((320, 320), Image.Resampling.LANCZOS)

        sticker_buf = assemble_sticker(person_img)
        if not sticker_buf:
            fallback_buf = io.BytesIO(resp.content)
            fallback_buf.seek(0)
            sent = bot.send_photo(chat_id, fallback_buf, caption="–í–∞—à —Å—Ç–∏–∫–µ—Ä (–±–µ–∑ —Ñ–æ–Ω–∞ –∏ —à–∏–ª—å–¥–∏–∫–∞).")
            file_id = sent.photo[-1].file_id if sent and sent.photo else None
            return fallback_buf, file_id, None, None

        save_path = os.path.join(UPLOAD_DIR, f"sticker_{chat_id}.png")
        os.makedirs(UPLOAD_DIR, exist_ok=True)
        sticker_buf.seek(0)
        Image.open(sticker_buf).convert("RGBA").save(save_path, format="PNG")

        pack_url = create_sticker_pack(bot, chat_id, save_path)
        if not pack_url:
            return sticker_buf, None, None, None

        sticker_buf.seek(0)
        sent = bot.send_photo(chat_id, sticker_buf)
        file_id = sent.photo[-1].file_id if sent and sent.photo else None
        return sticker_buf, file_id, pack_url, None

    except Exception as err:
        logging.error(f"[{chat_id}] Sticker generation failed: {err}")
        try:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞.")
        except Exception:
            pass
        return None, None, None, None